name: Build and Test PiDriveSmartOS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  QT_VERSION: 6.5.3
  PYTHON_VERSION: '3.11'

jobs:
  lint-cpp:
    name: Lint C++ Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format
      
      - name: Check C++ formatting
        run: |
          find src/carui -name "*.cpp" -o -name "*.h" | \
            xargs clang-format --dry-run --Werror
  
  lint-python:
    name: Lint Python Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy
      
      - name: Run Black
        run: black --check src/obd_service/
      
      - name: Run Flake8
        run: flake8 src/obd_service/ --max-line-length=100
      
      - name: Run mypy
        run: mypy src/obd_service/ || true  # Allow failures for now
  
  build-carui:
    name: Build Qt CarUI
    runs-on: ubuntu-latest
    needs: [lint-cpp]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qt6-base-dev \
            qt6-declarative-dev \
            qt6-multimedia-dev \
            qt6-webengine-dev \
            libqt6dbus6 \
            cmake \
            ninja-build
      
      - name: Configure CMake
        run: |
          cd src/carui
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release
      
      - name: Build
        run: |
          cd src/carui
          cmake --build build
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: carui-x86_64
          path: src/carui/build/carui
  
  build-python:
    name: Build Python Services
    runs-on: ubuntu-latest
    needs: [lint-python]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Test Python services
        run: |
          cd src/obd_service
          python -m pytest tests/ || echo "No tests yet"
  
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate Markdown
        run: |
          npx markdownlint-cli docs/**/*.md README.md || true
      
      - name: Check links
        run: |
          npx markdown-link-check docs/**/*.md README.md || true
  
  # Only run on release tags
  build-image:
    name: Build OS Image
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [build-carui, build-python]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            coreutils \
            quilt \
            parted \
            qemu-user-static \
            debootstrap \
            zerofree \
            zip \
            dosfstools \
            libarchive-tools \
            libcap2-bin \
            grep \
            rsync \
            xz-utils \
            file \
            git \
            curl
      
      - name: Clone pi-gen
        run: |
          git clone https://github.com/RPi-Distro/pi-gen.git
          cd pi-gen
          git checkout arm64
      
      - name: Prepare custom stage
        run: |
          mkdir -p pi-gen/stage-pidrive/00-install-pidrive/files
          cp -r src/* pi-gen/stage-pidrive/00-install-pidrive/files/
          cp -r config/* pi-gen/stage-pidrive/00-install-pidrive/files/
          cp scripts/install_dependencies.sh pi-gen/stage-pidrive/00-install-pidrive/00-run.sh
      
      - name: Configure pi-gen
        run: |
          cd pi-gen
          cat > config <<EOF
          IMG_NAME="pidriveos"
          RELEASE="bookworm"
          DEPLOY_COMPRESSION="xz"
          TARGET_HOSTNAME="pidrive"
          ENABLE_SSH=0
          FIRST_USER_NAME="pidrive"
          FIRST_USER_PASS="pidrive2024"
          EOF
          
          # Skip unnecessary stages
          touch ./stage3/SKIP ./stage4/SKIP ./stage5/SKIP
      
      - name: Build image (this takes ~30-60 minutes)
        run: |
          cd pi-gen
          sudo ./build.sh
      
      - name: Upload image artifact
        uses: actions/upload-artifact@v3
        with:
          name: pidriveos-image
          path: pi-gen/deploy/*.img.xz
          retention-days: 30
      
      - name: Upload to Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: pi-gen/deploy/*.img.xz
          token: ${{ secrets.GITHUB_TOKEN }}
  
  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

